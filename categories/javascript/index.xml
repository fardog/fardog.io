<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on fardog.io</title><link>https://fardog.io/categories/javascript/</link><description>Recent content in Javascript on fardog.io</description><generator>Hugo</generator><language>en-us</language><copyright>© 2024 Nathan Wittstock</copyright><lastBuildDate>Fri, 26 Sep 2014 12:05:00 -0700</lastBuildDate><atom:link href="https://fardog.io/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Mac OS X Audio in node.js, and a Chromecast</title><link>https://fardog.io/blog/2014/09/26/mac-os-x-audio-in-node.js-and-a-chromecast/</link><pubDate>Fri, 26 Sep 2014 12:05:00 -0700</pubDate><guid>https://fardog.io/blog/2014/09/26/mac-os-x-audio-in-node.js-and-a-chromecast/</guid><description>A few weeks ago, a simple idea formed: why can&amp;rsquo;t you easily stream system audio to a Chromecast? Sure, if your chosen listening application already supports it, you&amp;rsquo;re set. Otherwise you&amp;rsquo;re left out.
A solution seemed simple: node.js has streams, and they&amp;rsquo;re awesome! Take system audio, pipe it to an encoder, pipe that to an HTTP response, and tell the Chromecast where to look. Easy!
Except, there&amp;rsquo;s no node.js package that supports OS X audio input, except via bindings to another library.</description></item><item><title>XKCD Password Generation for Node.js</title><link>https://fardog.io/blog/2014/04/07/xkcd-password-generation-for-node.js/</link><pubDate>Mon, 07 Apr 2014 17:30:00 -0700</pubDate><guid>https://fardog.io/blog/2014/04/07/xkcd-password-generation-for-node.js/</guid><description>I created an XKCD-style password generator for Node.js (see this comic for reference). You can find it on my github or do an npm install -g xkcd-password to get it on your path.
There are others available, but most don&amp;rsquo;t include a CLI, or easily configurable options. Many use small word lists. So I made one that uses a sufficiently large list—113,809 words provided by the Moby Project—and both a simple commandline utility and a module that you can use in your Node.</description></item><item><title>primes, A Twitter-backed prime number generator</title><link>https://fardog.io/blog/2013/10/15/primes-a-twitter-backed-prime-number-generator/</link><pubDate>Tue, 15 Oct 2013 15:44:00 -0700</pubDate><guid>https://fardog.io/blog/2013/10/15/primes-a-twitter-backed-prime-number-generator/</guid><description>A few weeks ago I started primes, a Twitter-backed prime number generator. When I say &amp;ldquo;Twitter-backed&amp;rdquo;, I mean the bot that updates the account has very little idea of state: it only knows the last number it calculated because Twitter provides it. The program flow is this:
Start up Fetch the most recently calculated prime from the Twitter feed. Calculate the next prime. Post if an hour has passed since the last posting.</description></item></channel></rss>